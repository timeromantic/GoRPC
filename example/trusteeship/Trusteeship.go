// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package trusteeship

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TrusteeshipData interface { //服务说明
	//
	//@author
	//@copyright www.jumei.com
	//创建时间: 2015-8-25 13:5:18

	// Parameters:
	//  - Data
	IsExist(data float64) (r map[string]string, err error)
	// Parameters:
	//  - Data
	EncryptData(data string) (r map[string]string, err error)
	// Parameters:
	//  - DataId
	//  - AppId
	//  - Timestamp
	//  - Token
	GetDecryptData(dataId float64, appId string, timestamp float64, token string) (r map[string]string, err error)
	// Parameters:
	//  - DataArr
	EncryptDataBatchSimple(dataArr []string) (r map[string]string, err error)
	// Parameters:
	//  - DataIdArr
	//  - AppId
	//  - Timestamp
	//  - Token
	GetDecryptDataBatchSimple(dataIdArr []float64, appId string, timestamp float64, token string) (r map[string]string, err error)
	// Parameters:
	//  - DataId
	GetDecryptPhoneNumber(dataId float64) (r map[string]string, err error)
}

//服务说明
//
//@author
//@copyright www.jumei.com
//创建时间: 2015-8-25 13:5:18
type TrusteeshipDataClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTrusteeshipDataClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TrusteeshipDataClient {
	return &TrusteeshipDataClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTrusteeshipDataClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TrusteeshipDataClient {
	return &TrusteeshipDataClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Data
func (p *TrusteeshipDataClient) IsExist(data float64) (r map[string]string, err error) {
	if err = p.sendIsExist(data); err != nil {
		return
	}
	return p.recvIsExist()
}

func (p *TrusteeshipDataClient) sendIsExist(data float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isExist", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TrusteeshipDataIsExistArgs{
		Data: data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TrusteeshipDataClient) recvIsExist() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "isExist" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isExist failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isExist failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isExist failed: invalid message type")
		return
	}
	result := TrusteeshipDataIsExistResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Data
func (p *TrusteeshipDataClient) EncryptData(data string) (r map[string]string, err error) {
	if err = p.sendEncryptData(data); err != nil {
		return
	}
	return p.recvEncryptData()
}

func (p *TrusteeshipDataClient) sendEncryptData(data string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("encryptData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TrusteeshipDataEncryptDataArgs{
		Data: data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TrusteeshipDataClient) recvEncryptData() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "encryptData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "encryptData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "encryptData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "encryptData failed: invalid message type")
		return
	}
	result := TrusteeshipDataEncryptDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DataId
//  - AppId
//  - Timestamp
//  - Token
func (p *TrusteeshipDataClient) GetDecryptData(dataId float64, appId string, timestamp float64, token string) (r map[string]string, err error) {
	if err = p.sendGetDecryptData(dataId, appId, timestamp, token); err != nil {
		return
	}
	return p.recvGetDecryptData()
}

func (p *TrusteeshipDataClient) sendGetDecryptData(dataId float64, appId string, timestamp float64, token string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDecryptData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TrusteeshipDataGetDecryptDataArgs{
		DataId:    dataId,
		AppId:     appId,
		Timestamp: timestamp,
		Token:     token,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TrusteeshipDataClient) recvGetDecryptData() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getDecryptData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDecryptData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDecryptData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDecryptData failed: invalid message type")
		return
	}
	result := TrusteeshipDataGetDecryptDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DataArr
func (p *TrusteeshipDataClient) EncryptDataBatchSimple(dataArr []string) (r map[string]string, err error) {
	if err = p.sendEncryptDataBatchSimple(dataArr); err != nil {
		return
	}
	return p.recvEncryptDataBatchSimple()
}

func (p *TrusteeshipDataClient) sendEncryptDataBatchSimple(dataArr []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("encryptDataBatchSimple", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TrusteeshipDataEncryptDataBatchSimpleArgs{
		DataArr: dataArr,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TrusteeshipDataClient) recvEncryptDataBatchSimple() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "encryptDataBatchSimple" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "encryptDataBatchSimple failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "encryptDataBatchSimple failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "encryptDataBatchSimple failed: invalid message type")
		return
	}
	result := TrusteeshipDataEncryptDataBatchSimpleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DataIdArr
//  - AppId
//  - Timestamp
//  - Token
func (p *TrusteeshipDataClient) GetDecryptDataBatchSimple(dataIdArr []float64, appId string, timestamp float64, token string) (r map[string]string, err error) {
	if err = p.sendGetDecryptDataBatchSimple(dataIdArr, appId, timestamp, token); err != nil {
		return
	}
	return p.recvGetDecryptDataBatchSimple()
}

func (p *TrusteeshipDataClient) sendGetDecryptDataBatchSimple(dataIdArr []float64, appId string, timestamp float64, token string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDecryptDataBatchSimple", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TrusteeshipDataGetDecryptDataBatchSimpleArgs{
		DataIdArr: dataIdArr,
		AppId:     appId,
		Timestamp: timestamp,
		Token:     token,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TrusteeshipDataClient) recvGetDecryptDataBatchSimple() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getDecryptDataBatchSimple" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDecryptDataBatchSimple failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDecryptDataBatchSimple failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDecryptDataBatchSimple failed: invalid message type")
		return
	}
	result := TrusteeshipDataGetDecryptDataBatchSimpleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DataId
func (p *TrusteeshipDataClient) GetDecryptPhoneNumber(dataId float64) (r map[string]string, err error) {
	if err = p.sendGetDecryptPhoneNumber(dataId); err != nil {
		return
	}
	return p.recvGetDecryptPhoneNumber()
}

func (p *TrusteeshipDataClient) sendGetDecryptPhoneNumber(dataId float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDecryptPhoneNumber", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TrusteeshipDataGetDecryptPhoneNumberArgs{
		DataId: dataId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TrusteeshipDataClient) recvGetDecryptPhoneNumber() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getDecryptPhoneNumber" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDecryptPhoneNumber failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDecryptPhoneNumber failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDecryptPhoneNumber failed: invalid message type")
		return
	}
	result := TrusteeshipDataGetDecryptPhoneNumberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type TrusteeshipDataProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TrusteeshipData
}

func (p *TrusteeshipDataProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TrusteeshipDataProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TrusteeshipDataProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTrusteeshipDataProcessor(handler TrusteeshipData) *TrusteeshipDataProcessor {

	self12 := &TrusteeshipDataProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self12.processorMap["isExist"] = &trusteeshipDataProcessorIsExist{handler: handler}
	self12.processorMap["encryptData"] = &trusteeshipDataProcessorEncryptData{handler: handler}
	self12.processorMap["getDecryptData"] = &trusteeshipDataProcessorGetDecryptData{handler: handler}
	self12.processorMap["encryptDataBatchSimple"] = &trusteeshipDataProcessorEncryptDataBatchSimple{handler: handler}
	self12.processorMap["getDecryptDataBatchSimple"] = &trusteeshipDataProcessorGetDecryptDataBatchSimple{handler: handler}
	self12.processorMap["getDecryptPhoneNumber"] = &trusteeshipDataProcessorGetDecryptPhoneNumber{handler: handler}
	return self12
}

func (p *TrusteeshipDataProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x13.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x13

}

type trusteeshipDataProcessorIsExist struct {
	handler TrusteeshipData
}

func (p *trusteeshipDataProcessorIsExist) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TrusteeshipDataIsExistArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isExist", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TrusteeshipDataIsExistResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.IsExist(args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isExist: "+err2.Error())
		oprot.WriteMessageBegin("isExist", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("isExist", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type trusteeshipDataProcessorEncryptData struct {
	handler TrusteeshipData
}

func (p *trusteeshipDataProcessorEncryptData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TrusteeshipDataEncryptDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("encryptData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TrusteeshipDataEncryptDataResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.EncryptData(args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing encryptData: "+err2.Error())
		oprot.WriteMessageBegin("encryptData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("encryptData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type trusteeshipDataProcessorGetDecryptData struct {
	handler TrusteeshipData
}

func (p *trusteeshipDataProcessorGetDecryptData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TrusteeshipDataGetDecryptDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDecryptData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TrusteeshipDataGetDecryptDataResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.GetDecryptData(args.DataId, args.AppId, args.Timestamp, args.Token); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDecryptData: "+err2.Error())
		oprot.WriteMessageBegin("getDecryptData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDecryptData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type trusteeshipDataProcessorEncryptDataBatchSimple struct {
	handler TrusteeshipData
}

func (p *trusteeshipDataProcessorEncryptDataBatchSimple) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TrusteeshipDataEncryptDataBatchSimpleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("encryptDataBatchSimple", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TrusteeshipDataEncryptDataBatchSimpleResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.EncryptDataBatchSimple(args.DataArr); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing encryptDataBatchSimple: "+err2.Error())
		oprot.WriteMessageBegin("encryptDataBatchSimple", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("encryptDataBatchSimple", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type trusteeshipDataProcessorGetDecryptDataBatchSimple struct {
	handler TrusteeshipData
}

func (p *trusteeshipDataProcessorGetDecryptDataBatchSimple) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TrusteeshipDataGetDecryptDataBatchSimpleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDecryptDataBatchSimple", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TrusteeshipDataGetDecryptDataBatchSimpleResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.GetDecryptDataBatchSimple(args.DataIdArr, args.AppId, args.Timestamp, args.Token); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDecryptDataBatchSimple: "+err2.Error())
		oprot.WriteMessageBegin("getDecryptDataBatchSimple", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDecryptDataBatchSimple", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type trusteeshipDataProcessorGetDecryptPhoneNumber struct {
	handler TrusteeshipData
}

func (p *trusteeshipDataProcessorGetDecryptPhoneNumber) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TrusteeshipDataGetDecryptPhoneNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDecryptPhoneNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TrusteeshipDataGetDecryptPhoneNumberResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.GetDecryptPhoneNumber(args.DataId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDecryptPhoneNumber: "+err2.Error())
		oprot.WriteMessageBegin("getDecryptPhoneNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDecryptPhoneNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Data
type TrusteeshipDataIsExistArgs struct {
	Data float64 `thrift:"data,1" db:"data" json:"data"`
}

func NewTrusteeshipDataIsExistArgs() *TrusteeshipDataIsExistArgs {
	return &TrusteeshipDataIsExistArgs{}
}

func (p *TrusteeshipDataIsExistArgs) GetData() float64 {
	return p.Data
}
func (p *TrusteeshipDataIsExistArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataIsExistArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *TrusteeshipDataIsExistArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isExist_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataIsExistArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Data)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.data (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataIsExistArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataIsExistArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TrusteeshipDataIsExistResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTrusteeshipDataIsExistResult() *TrusteeshipDataIsExistResult {
	return &TrusteeshipDataIsExistResult{}
}

var TrusteeshipDataIsExistResult_Success_DEFAULT map[string]string

func (p *TrusteeshipDataIsExistResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *TrusteeshipDataIsExistResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TrusteeshipDataIsExistResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataIsExistResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val15 = v
		}
		p.Success[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TrusteeshipDataIsExistResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isExist_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataIsExistResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TrusteeshipDataIsExistResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataIsExistResult(%+v)", *p)
}

// Attributes:
//  - Data
type TrusteeshipDataEncryptDataArgs struct {
	Data string `thrift:"data,1" db:"data" json:"data"`
}

func NewTrusteeshipDataEncryptDataArgs() *TrusteeshipDataEncryptDataArgs {
	return &TrusteeshipDataEncryptDataArgs{}
}

func (p *TrusteeshipDataEncryptDataArgs) GetData() string {
	return p.Data
}
func (p *TrusteeshipDataEncryptDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("encryptData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err)
	}
	if err := oprot.WriteString(string(p.Data)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.data (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataEncryptDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataEncryptDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TrusteeshipDataEncryptDataResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTrusteeshipDataEncryptDataResult() *TrusteeshipDataEncryptDataResult {
	return &TrusteeshipDataEncryptDataResult{}
}

var TrusteeshipDataEncryptDataResult_Success_DEFAULT map[string]string

func (p *TrusteeshipDataEncryptDataResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *TrusteeshipDataEncryptDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TrusteeshipDataEncryptDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key16 = v
		}
		var _val17 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val17 = v
		}
		p.Success[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("encryptData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TrusteeshipDataEncryptDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataEncryptDataResult(%+v)", *p)
}

// Attributes:
//  - DataId
//  - AppId
//  - Timestamp
//  - Token
type TrusteeshipDataGetDecryptDataArgs struct {
	DataId    float64 `thrift:"dataId,1" db:"dataId" json:"dataId"`
	AppId     string  `thrift:"appId,2" db:"appId" json:"appId"`
	Timestamp float64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
	Token     string  `thrift:"token,4" db:"token" json:"token"`
}

func NewTrusteeshipDataGetDecryptDataArgs() *TrusteeshipDataGetDecryptDataArgs {
	return &TrusteeshipDataGetDecryptDataArgs{}
}

func (p *TrusteeshipDataGetDecryptDataArgs) GetDataId() float64 {
	return p.DataId
}

func (p *TrusteeshipDataGetDecryptDataArgs) GetAppId() string {
	return p.AppId
}

func (p *TrusteeshipDataGetDecryptDataArgs) GetTimestamp() float64 {
	return p.Timestamp
}

func (p *TrusteeshipDataGetDecryptDataArgs) GetToken() string {
	return p.Token
}
func (p *TrusteeshipDataGetDecryptDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DataId = v
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDecryptData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataId", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataId: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DataId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dataId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataId: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:token: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataGetDecryptDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TrusteeshipDataGetDecryptDataResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTrusteeshipDataGetDecryptDataResult() *TrusteeshipDataGetDecryptDataResult {
	return &TrusteeshipDataGetDecryptDataResult{}
}

var TrusteeshipDataGetDecryptDataResult_Success_DEFAULT map[string]string

func (p *TrusteeshipDataGetDecryptDataResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *TrusteeshipDataGetDecryptDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TrusteeshipDataGetDecryptDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key18 = v
		}
		var _val19 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val19 = v
		}
		p.Success[_key18] = _val19
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDecryptData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataGetDecryptDataResult(%+v)", *p)
}

// Attributes:
//  - DataArr
type TrusteeshipDataEncryptDataBatchSimpleArgs struct {
	DataArr []string `thrift:"dataArr,1" db:"dataArr" json:"dataArr"`
}

func NewTrusteeshipDataEncryptDataBatchSimpleArgs() *TrusteeshipDataEncryptDataBatchSimpleArgs {
	return &TrusteeshipDataEncryptDataBatchSimpleArgs{}
}

func (p *TrusteeshipDataEncryptDataBatchSimpleArgs) GetDataArr() []string {
	return p.DataArr
}
func (p *TrusteeshipDataEncryptDataBatchSimpleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataBatchSimpleArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.DataArr = tSlice
	for i := 0; i < size; i++ {
		var _elem20 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem20 = v
		}
		p.DataArr = append(p.DataArr, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataBatchSimpleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("encryptDataBatchSimple_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataBatchSimpleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataArr", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataArr: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.DataArr)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DataArr {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataArr: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataEncryptDataBatchSimpleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataEncryptDataBatchSimpleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TrusteeshipDataEncryptDataBatchSimpleResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTrusteeshipDataEncryptDataBatchSimpleResult() *TrusteeshipDataEncryptDataBatchSimpleResult {
	return &TrusteeshipDataEncryptDataBatchSimpleResult{}
}

var TrusteeshipDataEncryptDataBatchSimpleResult_Success_DEFAULT map[string]string

func (p *TrusteeshipDataEncryptDataBatchSimpleResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *TrusteeshipDataEncryptDataBatchSimpleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TrusteeshipDataEncryptDataBatchSimpleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataBatchSimpleResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key21 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key21 = v
		}
		var _val22 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val22 = v
		}
		p.Success[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataBatchSimpleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("encryptDataBatchSimple_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataEncryptDataBatchSimpleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TrusteeshipDataEncryptDataBatchSimpleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataEncryptDataBatchSimpleResult(%+v)", *p)
}

// Attributes:
//  - DataIdArr
//  - AppId
//  - Timestamp
//  - Token
type TrusteeshipDataGetDecryptDataBatchSimpleArgs struct {
	DataIdArr []float64 `thrift:"dataIdArr,1" db:"dataIdArr" json:"dataIdArr"`
	AppId     string    `thrift:"appId,2" db:"appId" json:"appId"`
	Timestamp float64   `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
	Token     string    `thrift:"token,4" db:"token" json:"token"`
}

func NewTrusteeshipDataGetDecryptDataBatchSimpleArgs() *TrusteeshipDataGetDecryptDataBatchSimpleArgs {
	return &TrusteeshipDataGetDecryptDataBatchSimpleArgs{}
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) GetDataIdArr() []float64 {
	return p.DataIdArr
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) GetAppId() string {
	return p.AppId
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) GetTimestamp() float64 {
	return p.Timestamp
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) GetToken() string {
	return p.Token
}
func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]float64, 0, size)
	p.DataIdArr = tSlice
	for i := 0; i < size; i++ {
		var _elem23 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem23 = v
		}
		p.DataIdArr = append(p.DataIdArr, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDecryptDataBatchSimple_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataIdArr", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataIdArr: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.DataIdArr)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DataIdArr {
		if err := oprot.WriteDouble(float64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataIdArr: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:token: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataGetDecryptDataBatchSimpleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TrusteeshipDataGetDecryptDataBatchSimpleResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTrusteeshipDataGetDecryptDataBatchSimpleResult() *TrusteeshipDataGetDecryptDataBatchSimpleResult {
	return &TrusteeshipDataGetDecryptDataBatchSimpleResult{}
}

var TrusteeshipDataGetDecryptDataBatchSimpleResult_Success_DEFAULT map[string]string

func (p *TrusteeshipDataGetDecryptDataBatchSimpleResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *TrusteeshipDataGetDecryptDataBatchSimpleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key24 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key24 = v
		}
		var _val25 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val25 = v
		}
		p.Success[_key24] = _val25
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDecryptDataBatchSimple_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TrusteeshipDataGetDecryptDataBatchSimpleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataGetDecryptDataBatchSimpleResult(%+v)", *p)
}

// Attributes:
//  - DataId
type TrusteeshipDataGetDecryptPhoneNumberArgs struct {
	DataId float64 `thrift:"dataId,1" db:"dataId" json:"dataId"`
}

func NewTrusteeshipDataGetDecryptPhoneNumberArgs() *TrusteeshipDataGetDecryptPhoneNumberArgs {
	return &TrusteeshipDataGetDecryptPhoneNumberArgs{}
}

func (p *TrusteeshipDataGetDecryptPhoneNumberArgs) GetDataId() float64 {
	return p.DataId
}
func (p *TrusteeshipDataGetDecryptPhoneNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptPhoneNumberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DataId = v
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptPhoneNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDecryptPhoneNumber_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptPhoneNumberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataId", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataId: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DataId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dataId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataId: ", p), err)
	}
	return err
}

func (p *TrusteeshipDataGetDecryptPhoneNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataGetDecryptPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TrusteeshipDataGetDecryptPhoneNumberResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTrusteeshipDataGetDecryptPhoneNumberResult() *TrusteeshipDataGetDecryptPhoneNumberResult {
	return &TrusteeshipDataGetDecryptPhoneNumberResult{}
}

var TrusteeshipDataGetDecryptPhoneNumberResult_Success_DEFAULT map[string]string

func (p *TrusteeshipDataGetDecryptPhoneNumberResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *TrusteeshipDataGetDecryptPhoneNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TrusteeshipDataGetDecryptPhoneNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptPhoneNumberResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key26 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key26 = v
		}
		var _val27 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val27 = v
		}
		p.Success[_key26] = _val27
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptPhoneNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDecryptPhoneNumber_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrusteeshipDataGetDecryptPhoneNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TrusteeshipDataGetDecryptPhoneNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrusteeshipDataGetDecryptPhoneNumberResult(%+v)", *p)
}
